{{- if and .Values.mongodb.enabled .Values.initJob.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "todo-app.fullname" . }}-mongodb-init
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "todo-app.labels" . | nindent 4 }}
    app: mongodb-init
spec:
  backoffLimit: {{ .Values.initJob.backoffLimit }}
  template:
    metadata:
      labels:
        app: mongodb-init
    spec:
      restartPolicy: OnFailure
      containers:
        - name: mongo-init
          image: {{ .Values.mongodb.image }}
          command:
            - /bin/bash
            - -c
            - |
              sleep {{ .Values.initJob.delaySeconds }}
              mongosh mongodb-service:27017/{{ .Values.mongodb.database }} --quiet <<'EOF'
              const todosConfig = {{ toJson (default (list) .Values.initJob.todos) }};
              const normalize = (todo) => {
                const id = todo.Id ?? todo.id ?? new ObjectId().toHexString();
                return {
                  _id: id,
                  Title: todo.Title ?? todo.title ?? "Unnamed task",
                  Description: todo.Description ?? todo.description ?? null,
                  IsCompleted: todo.IsCompleted ?? todo.isCompleted ?? false
                };
              };

              const todos = todosConfig.map(normalize);
              const collection = db.Todos;
              if (collection.estimatedDocumentCount() === 0 && todos.length > 0) {
                collection.insertMany(todos);
                print(`Inserted ${todos.length} todos into 'Todos'.`);
              } else {
                print("Skipping seed: collection already populated or no todos defined.");
              }
              EOF
{{- end }}
